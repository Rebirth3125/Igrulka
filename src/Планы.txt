1. Уникальные способности: (Выполнено)ы
Активные способности: Ввести дополнительные активные способности для героев, которые можно использовать при определенных условиях, например, мощный удар, который требует времени на перезарядку.
Ультимативные способности: Ввести ультимативные способности, которые могут быть использованы только раз за бой или требуют накопления ресурсов (например, ярости).
Специальные условия.
2. Более сложные механики:
Критические удары: Добавить вероятность критического удара, который наносит увеличенный урон.
Сопротивления и уязвимости: Ввести систему, где разные герои и враги могут быть устойчивы или уязвимы к определенным типам урона.
Экипировка: Добавить возможность героям носить разное оружие и броню, которые влияют на их характеристики и способности.
3. Интерфейсы и абстракции:
Интерфейс Combatant: Создать интерфейс или абстрактный класс, который будет включать общие методы для всех боевых единиц (героев и врагов), такие как attack, defend, useAbility, чтобы упростить управление боевыми единицами.
Состояния: Ввести концепцию состояний (например, оглушение, замедление, кровотечение), которые могут быть наложены на героя или врага и влиять на бой.
4. Балансировка и сложность:
Адаптивная сложность: Разработка механизма, который будет адаптировать сложность врагов в зависимости от уровня героя или прогресса игрока.
Разные уровни сложности: Возможность выбора уровня сложности, что будет влиять на параметры врагов и героев.
5. Оптимизация и расширяемость:
Локализация: Если планируется расширение проекта, можно добавить поддержку разных языков, например, вынести строки сообщений в отдельные файлы.
Паттерн проектирования: Использовать паттерны проектирования, такие как Strategy для гибкости в боевой механике или Factory для создания разных типов героев и врагов.
6. Графический интерфейс(Под вопросом?)
Интеграция с UI: Если планируется создание графического интерфейса, то стоит задуматься о том, как класс Warrior и другие классы будут взаимодействовать с представлением (например, как отображать атаку, здоровье, эффект блокировки урона).
Анимации: Подумать о том, как реалистично отобразить атаки, блоки и другие действия героя.
7. Реализм и детализация:
Энергия и усталость: Введение параметра энергии или усталости, который будет ограничивать количество действий героя за определенный период. (Под вопросом?)
Разнообразие атак: Введение разных типов атак с разными эффектами, например, оглушение, замедление или кровотечение.
8. Тестирование:
Юнит-тесты: Написание юнит-тестов для всех ключевых методов, чтобы обеспечить надежность и правильность работы всех функций.
Тестирование производительности: Проверка производительности классов и их методов, особенно в условиях масштабируемого боя с множеством героев и врагов.